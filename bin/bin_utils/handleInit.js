import {execSync} from "child_process";
import {askExtrasWithCheckboxes} from "./askExtrasWithCheckboxes.js";
import fs from "fs";
import path from "path";
import {writeGitignore} from "./writeGitignore.js";

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
 * - –°–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
 * - –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω
 * - –û–±–Ω–æ–≤–ª—è–µ—Ç landing.page.json —Å –∏–º–µ–Ω–µ–º –ø–∞–ø–∫–∏
 * - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 * - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç git –∏ —Å–æ–∑–¥–∞—ë—Ç .gitignore
 *
 * @param {string} targetDir - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç
 * @param {string} defaultShell - –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –æ–±–æ–ª–æ—á–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/bin/zsh' –∏–ª–∏ 'cmd.exe')
 * @returns {Promise<void>}
 */
export async function handleInit(targetDir, defaultShell) {
  if (!targetDir) {
    console.log('‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: b2c-landing-vite init <target-dir>');
    process.exit(1);
  }
  fs.mkdirSync(path.resolve(process.cwd(), targetDir), {recursive: true});

  const features = await askExtrasWithCheckboxes();
  let deps = features.filter(f => ['sass', 'vue', 'less', 'pug'].includes(f));
  if (!deps.includes('sass')) deps.unshift('sass');
  console.log(`üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${deps.join(', ')}`);

  const needGit = features.includes('git');
  const fullPath = path.resolve(process.cwd(), targetDir);
  const folderName = path.basename(fullPath);

  try {
    execSync(`npx create-b2c-landing-vite@latest`, {
      cwd: fullPath,
      stdio: 'inherit',
      shell: defaultShell,
      env: {...process.env, SHELL: defaultShell}
    });
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —à–∞–±–ª–æ–Ω–∞');
    process.exit(1);
  }

  const gitFolder = path.join(fullPath, '.git');
  if (fs.existsSync(gitFolder)) {
    fs.rmSync(gitFolder, {recursive: true, force: true});
  }

  const glob = await import('glob');
  const jsonFiles = glob.globSync('**/landing.page.json', {cwd: fullPath, absolute: true});
  jsonFiles.forEach(file => {
    const json = JSON.parse(fs.readFileSync(file, 'utf-8'));
    if (json.env?.cdnAssetsURL) {
      json.env.cdnAssetsURL = json.env.cdnAssetsURL.replace('<–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–∞–ø–∫–∏>', folderName);
      fs.writeFileSync(file, JSON.stringify(json, null, 2), 'utf-8');
    }
  });

  const gitignoreSrc = path.join(fullPath, '.gitignore');
  if (fs.existsSync(gitignoreSrc)) {
    fs.copyFileSync(gitignoreSrc, path.join(fullPath, '.gitignore'));
  }

  try {
    execSync(`npm install --save-dev ${deps.join(' ')}`, {
      cwd: fullPath,
      stdio: 'inherit',
    });
  } catch (err) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
    process.exit(1);
  }

  if (needGit) {
    try {
      execSync('git init', {cwd: fullPath, stdio: 'inherit'});
      console.log('üìÅ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (err) {
      console.log('‚ö†Ô∏è Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    await writeGitignore()
    console.log('üìù –§–∞–π–ª .gitignore —Å–æ–∑–¥–∞–Ω');
  }
}
