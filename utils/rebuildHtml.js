import fs from 'fs';
import jsesc from 'jsesc';

export function rebuildHtml(baseHtmlPath, sectionPaths) {
  console.log('üîÅ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ HTML...');
  const html = fs.readFileSync(baseHtmlPath, 'utf-8');

  const injected = sectionPaths
    .map(p => {
      if (fs.existsSync(p)) {
        return fs.readFileSync(p, 'utf-8');
      } else {
        console.warn(`‚ö†Ô∏è –°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${p}`);
        return '';
      }
    })
    .join('\n');

  const escaped = jsesc(injected, {
    quotes: 'double',
    isScriptContext: true
  });

  const result = html
    .replace('<!-- PAYLOAD PLACEHOLDER -->', injected)
    .replace('<!-- ESCAPED PAYLOAD PLACEHOLDER -->', escaped);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON –≤ __NEXT_DATA__
  const match = result.match(
    /<script id="__NEXT_DATA__" type="application\/json">([\s\S]*?)<\/script>/
  );

  if (match) {
    try {
      JSON.parse(match[1]);
      console.log('‚úÖ JSON –≤ __NEXT_DATA__ –≤–∞–ª–∏–¥–µ–Ω');
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ JSON –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏!');
      console.error(e.message);
    }
  } else {
    console.warn('‚ö†Ô∏è __NEXT_DATA__ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
  }

  return result;
}
