import chokidar from 'chokidar';
import express from 'express';
import open from 'open';
import {existsSync} from 'fs';
import {createServer as createViteServer} from 'vite';
import {getTemplatePathByBrand} from "./dev_utils/getTemplatePathByBrand.js";
import {generateLanding} from "./dev_utils/generateLanding.js";
import {loadConfig} from "./dev_utils/loadConfig.js";
import {reloadSections} from "./dev_utils/reloadSections.js";
import {copyTemplateFiles} from "./dev_utils/copyTemplateFiles.js";
import {prepareDevDirectory} from "./dev_utils/prepareDevDirectory.js";
import {DEFAULT_PORT, MESSAGES, PATHS} from './constants.js';
import {VITE_SERVER_CONFIG, WATCHER_SETTINGS} from './configs.js';
import {getLocalIp} from "./dev_utils/getLocalIp.js";
import path from "path";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const app = express();

export default async function startServer(configPath) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–∏ –∫ JSON-—Ñ–∞–π–ª—É
  if (!configPath) {
    console.error(MESSAGES.NO_JSON_PATH);
    console.error(MESSAGES.USAGE);
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è JSON-—Ñ–∞–π–ª–∞
  if (!existsSync(configPath)) {
    console.error(MESSAGES.FILE_NOT_FOUND(configPath));
    process.exit(1);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
  let configData;
  try {
    configData = loadConfig(configPath, PATHS.__dirname);
  } catch (error) {
    console.error(MESSAGES.CONFIG_READ_ERROR(error.message));
    process.exit(1);
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  prepareDevDirectory(PATHS.DEV_DIR);

  // –°–æ–∑–¥–∞–Ω–∏–µ Vite —Å–µ—Ä–≤–µ—Ä–∞
  const vite = await createViteServer(VITE_SERVER_CONFIG(PATHS.DEV_DIR));
  let hadBuildError = false;

  vite.config.logger.error = (...args) => {
    hadBuildError = true;
    console.log(...args);
  };

  vite.watcher.on('change', async () => {
    if (hadBuildError) {
      hadBuildError = false;
      await generateLanding(templatePath, configData, PATHS.DEV_DIR);

    }
  });
  app.use('/assets', express.static(path.resolve(`site/coral.ru/assets`)));
  app.use(vite.middlewares);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —à–∞–±–ª–æ–Ω—É –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  const templatePath = getTemplatePathByBrand(configPath, PATHS.__dirname);
  copyTemplateFiles(templatePath, PATHS.DEV_DIR);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª—ç–Ω–¥–∏–Ω–≥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  await generateLanding(templatePath, configData, PATHS.DEV_DIR);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ–∫—Ü–∏—è—Ö
  const watcher = chokidar.watch(configData.sections, WATCHER_SETTINGS);
  watcher.on('change', async () => {
    await generateLanding(templatePath, configData, PATHS.DEV_DIR);
  });

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
  const configWatcher = chokidar.watch(configPath, WATCHER_SETTINGS);
  configWatcher.on('change', async () => {
    try {
      configData = await reloadSections(watcher, configPath, templatePath, PATHS.DEV_DIR, PATHS.__dirname);
    } catch (error) {
      console.error(MESSAGES.CONFIG_READ_ERROR(error.message));
    }
  });

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  const PORT = process.env.PORT || DEFAULT_PORT;
  app.listen(PORT, '0.0.0.0', () => {
    console.log('+++ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω +++')
    console.log(`CWD: ${PATHS.__dirname}`)
    console.log(`SOURCE: ${configPath}`);
    console.log(`üöÄ –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}`);
    console.log(`üì± –í —Å–µ—Ç–∏:   http://${getLocalIp()}:${PORT}`);
    open(`http://localhost:${PORT}`);
  });

}
